/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _package_src_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../package/src/js */ \"../package/src/js/index.js\");\n\r\n\r\n\r\nconsole.log(\"Initialized My data\");\r\n_package_src_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create_input_table('table', 'tableButtons', 1);\r\n_package_src_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].collectButton();\r\n\r\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "../package/src/js/index.js":
/*!**********************************!*\
  !*** ../package/src/js/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n//import '../styles/main.scss';\r\n//import Chart from 'https://cdn.jsdelivr.net/npm/chart.js';\r\n\r\n//console.log(Chart);\r\n// import {Chart, registerables} from 'chart.js/dist/chart.js';\r\n// Chart.register(...registerables);\r\n\r\nlet tableCreated = false;\r\n//create_input_table('table', 'tableButtons', 1);\r\n//collectButton();\r\n\r\n\r\n//ADDING BUTTONS TO PAGE\r\n  function create_input_table(tableId, buttonId, dataCardsId) {\r\n  let tableElement = document.getElementById(tableId);\r\n\r\n  let tableButtons = document.getElementById(buttonId);\r\n  let addButton = document.createElement('button');\r\n  addButton.id = \"add\";\r\n  addButton.className = \"button-85\";\r\n  addButton.setAttribute('role', \"button\");\r\n  addButton.innerHTML = \"+\";\r\n  let createButton = document.createElement('button');\r\n  createButton.id = \"get\";\r\n  createButton.className = \"button-85\";\r\n  createButton.setAttribute('role', \"button\");\r\n  createButton.innerHTML = \"Create line Pictogram\";\r\n  let dataCard = document.createElement('div');\r\n  dataCard.className = 'dataCards';\r\n  dataCard.id = 'dataCards';\r\n  let row = document.createElement('div');\r\n  row.className = 'row';\r\n  dataCard.appendChild(row);\r\n  tableElement.appendChild(dataCard);\r\n  addCard(tableId,dataCardsId);\r\n  dataCardsId++;\r\n  addButton.addEventListener('click', (event) => { \r\n    addCard(tableId,dataCardsId);\r\n    dataCardsId++;\r\n    console.log(dataCardsId)\r\n   });\r\n  tableButtons.appendChild(addButton);\r\n  tableButtons.appendChild(createButton);\r\n  return true;\r\n\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//ADDING CARDS TO TABLE\r\nfunction addCard(tableId, dataCardsId) {\r\n  let dataCard = document.getElementById(tableId);\r\n  let card = document.createElement('div');\r\n  card.className = \"card\";\r\n  let header = document.createElement('div');\r\n  header.className = \"header\";\r\n  let inputCard1 = document.createElement('input');\r\n  inputCard1.className = \"inputCard1\"\r\n  let chatContainer = document.createElement('div');\r\n  chatContainer.className = 'chat-container';\r\n  let chatUtilities = document.createElement('div');\r\n  chatUtilities.className = 'chat-utilities';\r\n  let utilityContainer = document.createElement('div');\r\n  utilityContainer.className = 'utility-container';\r\n  let utilityGroup = document.createElement('ul');\r\n  utilityGroup.className = 'utility-group';\r\n  let emojiSelectorCreate = document.createElement('li');\r\n  emojiSelectorCreate.className = 'emoji-selector';\r\n  emojiSelectorCreate.id = 'emojiSelector';\r\n  let inputContainer = document.createElement('div');\r\n  inputContainer.className = 'input-container';\r\n  let emojiSearchCreate = document.createElement('input');\r\n  emojiSearchCreate.id = 'emojiSearch';\r\n  emojiSearchCreate.setAttribute(\"type\", \"text\");\r\n  emojiSearchCreate.setAttribute(\"placeholder\", \"Search...\");\r\n  let emojiListCreate = document.createElement('ul');\r\n  emojiListCreate.className = \"emoji-list\";\r\n  emojiListCreate.id = 'emojiList';\r\n  let emojiSelectorIconCreate = document.createElement('li');\r\n  emojiSelectorIconCreate.id = \"emojiSelectorIcon\";\r\n  let img = document.createElement('img');\r\n  img.setAttribute('src', 'https://upload.wikimedia.org/wikipedia/commons/9/90/Twemoji_1f600.svg');\r\n  emojiSelectorIconCreate.appendChild(img);\r\n  inputContainer.appendChild(emojiSearchCreate);\r\n  emojiSelectorCreate.appendChild(inputContainer);\r\n  emojiSelectorCreate.appendChild(emojiListCreate);\r\n  utilityGroup.appendChild(emojiSelectorCreate);\r\n  utilityGroup.appendChild(emojiSelectorIconCreate);\r\n  utilityContainer.appendChild(utilityGroup);\r\n  chatUtilities.appendChild(utilityContainer);\r\n  chatContainer.appendChild(chatUtilities);\r\n  header.appendChild(chatContainer);\r\n  //ADDING COLORPICKER\r\n  let colorPicker = document.createElement('div');\r\n  colorPicker.className='picker'\r\n  colorPicker.id=dataCardsId;\r\n  header.appendChild(colorPicker);\r\n  //CHECKING IF POP UP IS IN VIEWPORT\r\n  var isOutOfViewport = function (elem) {\r\n    var bounding = elem.getBoundingClientRect();\r\n    var out = {};\r\n    out.top = bounding.top < 0;\r\n    out.left = bounding.left < 0;\r\n    out.bottom = bounding.bottom > (window.innerHeight || document.documentElement.clientHeight);\r\n    out.right = bounding.right > (window.innerWidth || document.documentElement.clientWidth);\r\n    out.any = out.top || out.left || out.bottom || out.right;\r\n    out.all = out.top && out.left && out.bottom && out.right;\r\n    return out;\r\n  };\r\n  emojiSelectorIconCreate.addEventListener('click', () => {\r\n    emojiSelectorCreate.classList.toggle('active');\r\n    var isOut = isOutOfViewport(emojiSelectorCreate);\r\n    if (isOut.any) {\r\n      emojiSelectorCreate.style.bottom = '-710%'\r\n    }\r\n  });\r\n  //LOADING EMOJIS\r\n  let emojiCategories = [];\r\n  function setEmojiCategories(wishedCategories) {\r\n    emojiCategories = wishedCategories;\r\n  }\r\n  let EmojisPerCategory;\r\n  function setEmojisPerCategory(num) {\r\n    EmojisPerCategory = num;\r\n  }\r\n  setEmojisPerCategory(10);\r\n  setEmojiCategories(['food-drink']);\r\n  fetch('https://emoji-api.com/emojis?access_key=329dfe7d47ca9bf032e6959bd2692f5624520d19').then(res => res.json()).then(data => loadEmoji(data, emojiCategories, EmojisPerCategory));\r\n  function loadEmoji(data, emojiCategories, EmojisPerCategory) {\r\n    let counter = 0;\r\n    let previousCategory;\r\n    let currentCategory;\r\n    let first = true;\r\n    let emojiCodePoints = new Set()\r\n    data.forEach(emoji => {\r\n      if (!emojiCodePoints.has(emoji.codePoint)) {\r\n        if (first) {\r\n          previousCategory = emoji.group;\r\n          first = false;\r\n        }\r\n        let li = document.createElement('li');\r\n        li.setAttribute('emoji-name', emoji.slug)\r\n        li.textContent = emoji.character;\r\n        let currentCategory = emoji.group;\r\n        if (previousCategory == currentCategory) {\r\n          counter++;\r\n        } else {\r\n          counter = 1;\r\n        }\r\n        if (emojiCategories.includes(emoji.group) && counter <= EmojisPerCategory) {\r\n          li.addEventListener('click', () => {\r\n            emojiSelectorIconCreate.style.display = \"none\";\r\n            let emojiInputExists = utilityGroup.getElementsByTagName('p').length;\r\n            //DISABLE INPUTING MULTIPLE EMOJIS IN ONE CARD\r\n            if (emojiInputExists) {\r\n              utilityGroup.getElementsByTagName('p')[0].remove();\r\n            }\r\n            let emojiInput = document.createElement('p');\r\n            emojiInput.textContent = emoji.character;\r\n            emojiInput.className = \"emoji-input\";\r\n            emojiSelectorCreate.classList.toggle('active');\r\n            emojiInput.addEventListener('click', () => {\r\n              emojiSelectorCreate.classList.toggle('active');\r\n              var isOut = isOutOfViewport(emojiSelectorCreate);\r\n              if (isOut.any) {\r\n                emojiSelectorCreate.style.bottom = '-710%'\r\n              }\r\n            });\r\n            utilityGroup.appendChild(emojiInput);\r\n          });\r\n          emojiListCreate.appendChild(li);\r\n          previousCategory = currentCategory;\r\n        }\r\n        emojiCodePoints.add(emoji.codePoint)\r\n      }\r\n    });\r\n  }\r\n  //SEARCHING EMOJIS\r\n  emojiSearchCreate.addEventListener('keyup', e => {\r\n    let value = e.target.value;\r\n    let emojis = document.querySelectorAll('#emojiList li');\r\n    emojis.forEach(emoji => {\r\n      if (emoji.getAttribute('emoji-name').toLowerCase().includes(value)) {\r\n        emoji.style.display = 'flex';\r\n      } else {\r\n        emoji.style.display = 'none';\r\n      }\r\n    })\r\n  })\r\n  //MAKING CARDS FOR NUMBER AND TEXT INPUT\r\n  let container = document.createElement('div');\r\n  container.className = \"container\";\r\n  let inputCard2 = document.createElement('input');\r\n  inputCard2.className = \"inputCard2\"\r\n  inputCard2.setAttribute(\"placeHolder\", \"Input name\");\r\n  container.appendChild(inputCard2);\r\n  let container2 = document.createElement('div');\r\n  container2.className = \"container2\";\r\n  let inputCard3 = document.createElement('input');\r\n  inputCard3.className = \"inputCard3\"\r\n  inputCard3.setAttribute(\"placeHolder\", \"Input number\");\r\n  container2.appendChild(inputCard3);\r\n \r\n  let container3 = document.createElement('div');\r\n  container3.className = \"container2\"\r\n  let button = document.createElement('button');\r\n  button.className = \"addDataButton \";\r\n  container3.appendChild(button);\r\n\r\n  //ADDING DELETE CARD BUTOTN\r\n  let deleteButton = document.createElement('button');\r\n  deleteButton.className = \"deleteButton\";\r\n  header.style.position = \"relative\";\r\n  deleteButton.style.position = \"absolute\"\r\n  deleteButton.style.top = \"5px\"\r\n  deleteButton.style.left = \"5px\"\r\n  \r\n  header.appendChild(deleteButton);\r\n  card.appendChild(header);\r\n  card.appendChild(container);\r\n  card.appendChild(container2);\r\n  card.appendChild(container3);\r\n  \r\n  button.addEventListener('click', e => {\r\n    container3.remove(button);\r\n    \r\n    let container = document.createElement('div');\r\n    container.className = \"container\";\r\n    let inputCard2 = document.createElement('input');\r\n    inputCard2.className = \"inputCard2\"\r\n    inputCard2.setAttribute(\"placeHolder\", \"Input name\");\r\n    container.appendChild(inputCard2);\r\n    let container2 = document.createElement('div');\r\n    container2.className = \"container2\";\r\n    let inputCard3 = document.createElement('input');\r\n    inputCard3.className = \"inputCard3\"\r\n    inputCard3.setAttribute(\"placeHolder\", \"Input number\");\r\n    container2.appendChild(inputCard3);\r\n   \r\n    let container3 = document.createElement('div');\r\n    container3.className = \"container2\"\r\n    let button = document.createElement('button');\r\n    button.className = \"addDataButton \";\r\n    container2.appendChild(button);\r\n    \r\n    card.appendChild(container);\r\n    card.appendChild(container2);\r\n    card.appendChild(container3);\r\n   })\r\n\r\n  function addNewField(){\r\n    \r\n \r\n  }\r\n  let newDataButton = document.getElementsByClassName(\"addDataButton\")\r\n  for(let i = 0; i < newDataButton.length; i++){\r\n    newDataButton[i].addEventListener('click', e => {\r\n      addNewField();\r\n    \r\n   });\r\n  }\r\n\r\n  deleteButton.addEventListener('click', e => {\r\n    card.remove();\r\n  })\r\n  dataCard.appendChild(card);\r\n  let id = new String(\"#\" + dataCardsId.toString()); \r\n  console.log(\"id:\"+id);\r\n  $('#'+dataCardsId).colorPick({\r\n        'initialColor' : '#8e44ad',\r\n        'palette': [\"#1abc9c\", \"#16a085\", \"#2ecc71\", \"#27ae60\", \"#3498db\", \"#2980b9\", \"#9b59b6\", \"#8e44ad\", \"#34495e\", \"#2c3e50\", \"#f1c40f\", \"#f39c12\", \"#e67e22\", \"#d35400\", \"#e74c3c\", \"#c0392b\", \"#ecf0f1\"],\r\n        'onColorSelected': function() {\r\n            console.log(\"The user has selected the color: \" + this.color)\r\n            this.element.css({'backgroundColor': this.color, 'color': this.color});\r\n        }\r\n    });\r\n}\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///COLLECTING DATA\r\nfunction getData() {\r\n  console.log(\"unutar getData\");\r\n  let table = document.getElementById('dataCards');\r\n  let unicode = table.getElementsByClassName('emoji-input');\r\n  let unicodeArray = [];\r\n  for (let i = 0; i < unicode.length; i++) {\r\n    if (unicode[i].textContent.trim != \"\") {\r\n      unicodeArray[i] = unicode[i].textContent\r\n      //console.log(\"unicodeArray\" + unicodeArray[i]);\r\n    }\r\n  }\r\n  let name = table.getElementsByClassName('inputCard2');\r\n  let nameArray = [];\r\n  for (let i = 0; i < name.length; i++) {\r\n    if (name[i].value.length != 0) {\r\n      nameArray[i] = name[i].value\r\n      //console.log(\"unicodeArray\" + unicodeArray[i]);\r\n\r\n    }\r\n  }\r\n  let number = table.getElementsByClassName('inputCard3');\r\n  let numberArray = [];\r\n  for (let i = 0; i < number.length; i++) {\r\n    if (number[i].value.length != 0) {\r\n      numberArray[i] = number[i].value\r\n    }\r\n  }\r\n\r\n  return {\r\n    labels: nameArray,\r\n    values: numberArray,\r\n    unicode: unicodeArray\r\n  }\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//CREATING GRAPH\r\nfunction createGraphCard(canvasId) {\r\n  let body = document.getElementById('body');\r\n  let chartCard = document.createElement('div');\r\n  chartCard.className = \"chartCard\";\r\n  let chartName = document.createElement('div');\r\n  chartName.innerHTML = canvasId;\r\n  let chartBox = document.createElement('div');\r\n  chartBox.className = \"chartBox\";\r\n  let canvas = document.createElement('canvas');\r\n  canvas.id = canvasId;\r\n  let maxButton = document.createElement('button');\r\n  maxButton.className = \"button-85\";\r\n  maxButton.id = \"maxButton\"\r\n  maxButton.innerHTML = \"Show MAX value\";\r\n  chartBox.appendChild(chartName);\r\n  chartBox.appendChild(canvas);\r\n  chartBox.appendChild(maxButton);\r\n  chartCard.appendChild(chartBox);\r\n  body.appendChild(chartCard);\r\n}\r\nif(tableCreated){\r\n}\r\n   function collectButton() {\r\n  console.log(\"In\")\r\n  const button = document.getElementById(\"get\");\r\n  button.addEventListener('click', (event) => {\r\n    let temp = getData();\r\n    console.log(temp);\r\n\r\n    let Bar2 = {\r\n      type: \"bar\",\r\n      labels: temp.labels,\r\n      values: temp.values,\r\n      unicode: temp.unicode,\r\n    };\r\n    createGraphCard('barPictogram')\r\n    let barPictogramReturn = KidChart(barPictogram, Bar2, 'barPictogram');\r\n    console.log(barPictogramReturn);\r\n    //createGraphCard('barTransition')\r\n    //KidChart(barTransition, Bar2, 'barTransition');\r\n    //createGraphCard('barChart')\r\n    //KidChart(barChart, Bar2, 'barChart');\r\n    document.getElementById(\"maxButton\").addEventListener('click', () => {\r\n      barPictogramReturn.options.scales.y.grid.color = (ctx) => {\r\n        let max = barPictogramReturn.data.datasets[0].data[0];\r\n        for (let i = 0; i < barPictogramReturn.data.datasets[0].data.length; i++) {\r\n          if (max < barPictogramReturn.data.datasets[0].data[i]) {\r\n            max = barPictogramReturn.data.datasets[0].data[i];\r\n          }\r\n        }\r\n        if (ctx.tick.value == max) {\r\n          return \"red\"\r\n        } else {\r\n          return 'grey'\r\n        }\r\n      };\r\n      barPictogramReturn.update();\r\n    })\r\n  });\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//DIJAGRAMI\r\n//DEFINIRANJE TIPOVA DIJAGRAMA\r\nlet piePictogram = \"piePictogram\";\r\nlet pieTransition = \"pieTransition\";\r\nlet pieChart = \"pieChart\";\r\nlet barPictogram = \"barPictogram\";\r\nlet barTransition = \"barTransition\";\r\nlet barChart = \"barChart\";\r\nlet linePictogram = \"linePictogram\";\r\nlet lineTransition = \"lineTransition\";\r\nlet lineChart = \"lineChart\";\r\nlet Bar = {\r\n  type: \"bar\",\r\n  labels: [\"Apples\", \"Oranges\", \"Bananas\", \"Strawberrys\"],\r\n  values: [1, 12.86, 3, 4],\r\n  unicode: [\r\n    \"\\uD83C\\uDF4F\",\r\n    \"\\uD83C\\uDF4A\",\r\n    \"\\uD83C\\uDF4C\",\r\n    \"\\uD83C\\uDF53\",\r\n  ],\r\n};\r\nlet Pie = {\r\n  type: \"pie\",\r\n  labels: [\"Apples\", \"Oranges\", \"Bananas\", \"Strawberrys\"],\r\n  values: [1, 22, 3.78, 3.5],\r\n  unicode: [\r\n    \"\\uD83C\\uDF4F\",\r\n    \"\\uD83C\\uDF4A\",\r\n    \"\\uD83C\\uDF4C\",\r\n    \"\\uD83C\\uDF53\",\r\n  ],\r\n};\r\nlet Line = {\r\n  type: \"line\",\r\n  labels: [\"first day\", \"second day\", \"third day\", \"fourth day\"],\r\n  values: [1, 2.8, 5, 7],\r\n  labelDataset: [\r\n    \"pickedApples\",\r\n  ],\r\n  unicode: [\r\n    \"\\uD83C\\uDF4F\",\r\n    \"\\uD83C\\uDF4A\",\r\n    \"\\uD83C\\uDF4C\",\r\n    \"\\uD83C\\uDF53\",\r\n  ],\r\n};\r\n//POZIV FUNKCIJE ZA RENDERING\r\n/*KidChart(piePictogram, Pie, \"piePictogram\");\r\nKidChart(pieTransition, Pie, \"pieTransition\");\r\nKidChart(pieChart, Pie, \"pieChart\");\r\nKidChart(linePictogram, Line, \"linePictogram\");\r\nKidChart(lineTransition, Line, \"lineTransition\");\r\nKidChart(lineChart, Line, \"lineChart\");\r\n KidChart(barPictogram, Bar2);\r\n KidChart(barTransition, Bar2);\r\n KidChart(barChart, Bar2);*/\r\n// RENDERING FUNCTION\r\nfunction KidChart(typeOfChart, userData, canvasId) {\r\n  //DEFAULT DATA VALUES\r\n  var data = {\r\n    labels: userData.labels,\r\n    datasets: [\r\n      {\r\n        label: \"Number of fruit\",\r\n        data: userData.values,\r\n        backgroundColor: [\r\n          \"rgba(93, 230, 0, 0.8)\",\r\n          \"rgba(233, 148, 0, 0.8)\",\r\n          \"rgba(255, 252, 0, 0.8)\",\r\n          \"rgba(255, 5, 5, 0.8)\",\r\n        ],\r\n        borderColor: [\r\n          \"rgba(93, 230, 0, 1)\",\r\n          \"rgba(233, 148, 0, 1)\",\r\n          \"rgba(255, 252, 0, 1)\",\r\n          \"rgba(255, 5, 5, 1)\",\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n  if (typeOfChart == \"barPictogram\" || typeOfChart == \"piePictogram\") {\r\n    console.log(\"userData labels: \" + userData.labels);\r\n    console.log(\"userData values : \" + userData.values);\r\n    var data = {\r\n      labels: userData.labels,\r\n      datasets: [\r\n        {\r\n          label: \"Type of fruit\",\r\n          data: userData.values,\r\n          backgroundColor: \"rgba(255, 255, 255, 0.1)\",\r\n          borderColor: [\r\n            \"rgba(93, 230, 0, 1)\",\r\n            \"rgba(233, 148, 0, 1)\",\r\n            \"rgba(255, 252, 0, 1)\",\r\n            \"rgba(255, 5, 5, 1)\",\r\n          ],\r\n          borderWidth: 5,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  if (typeOfChart == \"lineChart\") {\r\n    data = {\r\n      labels: userData.labels,\r\n      datasets: [\r\n        {\r\n          label: userData.labelDataset[0],\r\n          data: userData.values,\r\n          fill: false,\r\n          backgroundColor: \"rgba(93, 230, 0, 0.8)\",\r\n          borderColor: \"rgba(93, 230, 0, 0.8)\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  if (typeOfChart == \"linePictogram\") {\r\n    data = {\r\n      labels: userData.labels,\r\n      datasets: [\r\n        {\r\n          label: userData.labelDataset[0],\r\n          data: userData.values,\r\n          fill: false,\r\n          backgroundColor: \"rgba(255, 255, 255, 0.1)\",\r\n          borderColor: \"rgba(255, 255, 255, 0.1)\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  //PLUGIN FOR EMOJI RENDERING\r\n  const plugin = {\r\n    id: \"plugin\",\r\n    afterDatasetDraw(chart, args, options) {\r\n      const {\r\n        ctx,\r\n        chartArea: { top, bottom, left, right, width, height },\r\n        scales: { x, y },\r\n      } = chart;\r\n      ctx.save();\r\n      if (\r\n        typeOfChart == \"piePictogram\" ||\r\n        typeOfChart == \"pieTransition\"\r\n      ) {\r\n        //CALCULATING WHICH PERCENTAGE OF PIE CHART EACH VALUE TAKES\r\n        let angles = [];\r\n        let sum = 0;\r\n        for (let i = 0; i < userData.values.length; i++) {\r\n          sum += userData.values[i];\r\n        }\r\n        for (let i = 0; i < userData.values.length; i++) {\r\n          angles[i] = (userData.values[i] / sum) * 6.2831;\r\n        }\r\n        let current_angle = 4.71238898038 + angles[0] / 2;\r\n        let max_width = 30;\r\n        for (let i = 0; i < userData.values.length; i++) {\r\n          let temp = Math.min(width / 3 / userData.values[i] - 5, 30);\r\n          let size = temp;\r\n          //DISABLING TOO SMALLL ICONS\r\n          if (temp < 0) {\r\n            size = Math.max(temp, 1);\r\n            console.log(\"Icons don't fit on the chart.\");\r\n            userData.values[i] =\r\n              ((width / 2 -\r\n                Math.ceil(\r\n                  Math.sqrt(0.5 * size * 0.5 * size + (max_width * max_width) / 4))) / 6) - 1;\r\n          }\r\n          let a = 0.5 * size * 0.5 * size;\r\n          let b = max_width * max_width;\r\n          let radius = (width / 2 - Math.ceil(Math.sqrt(a + b / 4)));\r\n          for (let j = 0; j < Math.floor(userData.values[i]); j++) {\r\n            ctx.font = `${size}px Arial`;\r\n            ctx.fillText(\r\n              userData.unicode[i],\r\n              radius * Math.cos(current_angle) + width / 2 - size / 2,\r\n              radius * Math.sin(current_angle) + width / 2 + max_width / 2,\r\n              max_width\r\n            );\r\n            radius -= size + 5;\r\n          }\r\n          current_angle += angles[i] / 2 + angles[i + 1] / 2;\r\n        }\r\n      }\r\n      if (\r\n        typeOfChart == \"barTransition\" ||\r\n        typeOfChart == \"barPictogram\"\r\n      ) {\r\n        let size = (y.getPixelForValue(0) - y.getPixelForValue(1)) / 1.5;\r\n        for (let i = 0; i < userData.values.length; i++) {\r\n          for (let j = 0; j < Math.floor(userData.values[i]); j++) {\r\n            ctx.font = `${size}px Arial`;\r\n            ctx.fillText(\r\n              userData.unicode[i],\r\n              x.getPixelForValue(i) - size / 2,\r\n              y.getPixelForValue(j + 1) + size / 0.87,\r\n              size\r\n            );\r\n          }\r\n        }\r\n      }\r\n      if (\r\n        typeOfChart == \"lineTransition\" ||\r\n        typeOfChart == \"linePictogram\"\r\n      ) {\r\n        let size = (y.getPixelForValue(0) - y.getPixelForValue(1)) / 2.5;\r\n        for (let i = 0; i < userData.values.length; i++) {\r\n          for (let j = 0; j < Math.floor(userData.values[i]); j++) {\r\n            let between =\r\n              y.getPixelForValue(0) -\r\n              y.getPixelForValue(userData.values[i]);\r\n            ctx.font = `${size}px Arial`;\r\n            if (j == 0) {\r\n              ctx.fillText(\r\n                userData.unicode[0],\r\n                x.getPixelForValue(i) - size / 2,\r\n                y.getPixelForValue(j + 1.5) + size,\r\n                size\r\n              );\r\n            } else {\r\n              ctx.fillText(\r\n                userData.unicode[0],\r\n                x.getPixelForValue(i) - size / 2,\r\n                y.getPixelForValue(j + 1) + size * 0.5,\r\n                size\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n  var display = false;\r\n  if (typeOfChart == \"pieChart\" || typeOfChart == \"lineChart\") {\r\n    display = true;\r\n  }\r\n  // config\r\n  const config = {\r\n    type: userData.type,\r\n    data,\r\n    options: {\r\n      plugins: {\r\n        legend: {\r\n          display: display,\r\n        },\r\n      },\r\n      responsive: true,\r\n      scales: {\r\n        y: {\r\n          ticks: {\r\n            color: \"#718096\",\r\n          },\r\n          beginAtZero: true,\r\n          drawBorder: true,\r\n          grid: {\r\n            color: (ctx) => {\r\n              return \"#718096\"\r\n            },\r\n          }\r\n        }\r\n      }\r\n    },\r\n    plugins: [plugin],\r\n  };\r\n  // render init block\r\n  console.log(\"canvas \"+document.getElementById(canvasId));\r\n console.log(\"config \" + config);\r\n  const myKidChart = new Chart(\r\n    document.getElementById(canvasId),\r\n    config\r\n  );\r\n  console.log(\"config2 \");\r\n\r\n  return myKidChart;\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  create_input_table,\r\n  collectButton\r\n});\r\n/*export default \r\n{  create_input_table,\r\n  collectButton}\r\n;*/\n\n//# sourceURL=webpack:///../package/src/js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;